<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lilu.life]]></title>
  <link href="http://lilu.github.com/atom.xml" rel="self"/>
  <link href="http://lilu.github.com/"/>
  <updated>2012-08-07T17:10:09+08:00</updated>
  <id>http://lilu.github.com/</id>
  <author>
    <name><![CDATA[lilu]]></name>
    <email><![CDATA[lilu.life@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why coffee script is awesome]]></title>
    <link href="http://lilu.github.com/blog/2012/08/06/coffeescript/"/>
    <updated>2012-08-06T12:52:00+08:00</updated>
    <id>http://lilu.github.com/blog/2012/08/06/coffeescript</id>
    <content type="html"><![CDATA[<h2>序</h2>

<hr />

<blockquote><p>Every language feature in CoffeeScript has been designed using this kind of process:
  attempt to take the beautiful dynamic semantics of JavaScript—object literals, function expressions, prototypal inheritance—and express them in a clean, readable, minimal way.
<small>by Jeremy Ashkenas, author of CoffeeScript</small></p></blockquote>

<p><a href="http://coffeescript.org/">CoffeeScript</a>是一门简洁的，构架于JavaScript之上的预处理器语言，可以静态编译成JavaScript，语法主要受ruby和python影响，目前已经为众多rails和node项目采用。</p>

<p>为什么要用CoffeeScript?</p>

<ul>
<li>更少，更紧凑，和更清晰的代码</li>
<li>通过规避和改变对JavaScript中不良部分的使用，只留下精华，让代码减少出错率，更容易维护</li>
<li>在很多常用模式的实现上采用了JavaScript中的最佳实践</li>
<li>CoffeeScript生成的JavaScript代码都可以完全通过<a href="http://www.javascriptlint.com/">JSLint</a>的检测</li>
</ul>


<p>什么情况下不推荐使用CoffeeScript?</p>

<ul>
<li>CoffeeScript不是JavaScript的超集，也不是完全替代品，不应该在不会JavaScript的情况下使用CoffeeScript工作</li>
</ul>


<p>CoffeeScript是一种需要预编译的语言，不能在运行时(Runtime)解释，这造成了她普遍被人质疑的一点，就是如果代码中出现运行时错误时难以调试，不过从实际使用上来看，因为CoffeeScript的编译结果大部分情况下自然而合理，至少我从来没有发现从生成的JavaScript代码回溯到对应的CoffeeScript代码有什么困难之处，我们稍后会看到这种对应关系的细节</p>

<p>这种静态编译还有一个额外的好处，就是CoffeeScript和现有的环境(浏览器,Node,Rhino等)与库完全兼容</p>

<p>最简单的安装和测试CoffeeScript的方法，是使用<em>node.js</em>的<em>npm</em>安装，然后使用命令行脚本实时编译</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g coffee-script
</span><span class='line'><span class="c"># watch and compile</span>
</span><span class='line'>coffee -w --output lib --compile src
</span></code></pre></td></tr></table></div></figure>


<p>这里假设你的coffee代码在src目录下，这个daemon会自动检测文件的改变，并编译成js文件放到lib目录下</p>

<hr />

<h2>语法</h2>

<p>与SASS/LESS和CSS的关系不同，CoffeeScript不是JavaScript的超集，不能在CoffeeScript程序中写JavaScript代码，比如<code>function</code>等关键字</p>

<h3>格式</h3>

<p>在js中，如果认为当前语句和随后语句是一个整体的话，就不会自己加<code>;</code>，比如以下javascript代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//javascript code</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">x</span><span class="o">+</span><span class="nx">f</span>
</span><span class='line'><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//parsed to:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">x</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>很多js中的问题由此引起(实际上现在把<code>;</code>放在哪里，在js社区内也是个争论的话题)</p>

<p>而CoffeeScript在编译时为每条语句加上<code>;</code>，因此在代码中<strong>不需要</strong>写<code>;</code></p>

<p>CoffeeScript中的注释采用<code>#</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># single line comment</span>
</span><span class='line'><span class="cm">### </span>
</span><span class='line'><span class="cm">  multi line comment</span>
</span><span class='line'><span class="cm">###</span>
</span></code></pre></td></tr></table></div></figure>


<p>CoffeeScript中对空白敏感，这种做法来自python，任何需要<code>({})</code>的场合下，可以用缩进代替</p>

<h3>作用域</h3>

<p>在js中最糟糕的设计就是全局变量，当你忘记用<code>var</code>声明变量的时候，这个变量会成为全局对象上的一个属性</p>

<p>CoffeeScript避免了这点</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">foo = </span><span class="s">&quot;bar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>会编译成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;bar&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>任何的代码都会使用<em>Immediate Function</em>包装，这样<code>foo</code>成为了本地变量，并且，可以通过<code>call</code>指定的<code>this</code>引用全局对象</p>

<p>为了方便起见，之后的编译后代码描述不会再加上这个包装</p>

<p>实际上在CoffeeScript中，你也不需要再用<code>var</code>声明变量，编译后会自动加上<code>var</code>，并且将声明<em>hoisting</em>，即放到作用域的顶部，看一个来自官方文档的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">outer = </span><span class="mi">1</span>
</span><span class='line'><span class="nv">change = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">inner = </span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="nv">outer = </span><span class="mi">10</span>
</span><span class='line'><span class="nv">inner = </span><span class="nx">change</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>-&gt;</code>是函数定义的简写方式，之后我们会探讨</p>

<p>编译后的js如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">change</span><span class="p">,</span> <span class="nx">inner</span><span class="p">,</span> <span class="nx">outer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">outer</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">change</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">inner</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">inner</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">outer</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">inner</span> <span class="o">=</span> <span class="nx">change</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是类似ruby中的自然的作用域实现方式，<code>inner</code>在<code>change()</code>内定义成了局部变量，因为在代码中之前没有定义过</p>

<h3>赋值</h3>

<p>首先是字符串可以用类ruby的语法内嵌</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">target = </span><span class="s">&quot;world&quot;</span>
</span><span class='line'><span class="nx">alert</span> <span class="s">&quot;hello, </span><span class="si">#{</span><span class="nx">target</span><span class="si">}</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其次是字面量，可以用类似<em>YAML</em>的方法定义对象字面量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">object1 = one: </span><span class="mi">1</span><span class="p">,</span> <span class="nv">two: </span><span class="mi">2</span>
</span><span class='line'><span class="nv">object2 =</span>
</span><span class='line'>  <span class="nv">one: </span><span class="mi">1</span>
</span><span class='line'>  <span class="nv">two: </span><span class="mi">2</span>
</span><span class='line'>  <span class="k">class</span><span class="o">:</span> <span class="s">&quot;numbers&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意保留字<code>class</code>，现在可以直接作为对象的key了</p>

<p>数组也可以分行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">arr = </span><span class="p">[</span>
</span><span class='line'>  <span class="mi">1</span>
</span><span class='line'>  <span class="mi">2</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以解构赋值(Destructuring)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">obj = </span><span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span><span class="s">&quot;bar&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span>
</span><span class='line'><span class="nv">arr = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span>
</span></code></pre></td></tr></table></div></figure>


<h3>数组</h3>

<p>数组的操作引入了来自ruby的Range概念，并且可以将字符串完全作为数组操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">numbers = </span><span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="nx">numbers</span><span class="p">[</span><span class="mi">3</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nv">my = </span><span class="s">&quot;my string&quot;</span><span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>判断一个值是否在数组内，在js中可以用<code>Array.prototype.indexOf</code>，不过IE8及以下不支持，CoffeeScript提供了跨浏览器的<code>in</code>操作符解决</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">arr = </span><span class="p">[</span><span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">]</span>
</span><span class='line'><span class="s">&quot;foo&quot;</span> <span class="k">in</span> <span class="nx">arr</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体的实现上，是一个对<code>indexOf</code>的Shim</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">var</span> <span class="nx">arr</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">__indexOf</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">indexOf</span> <span class="o">||</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="k">this</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">item</span><span class="p">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>     <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">__indexOf</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>for..in</code>语法可以用在数组上了，背后是用js的for循环实现的，这比数组的迭代器方法要效率高一些</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">for</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">[</span><span class="s">&quot;Roger&quot;</span><span class="p">,</span> <span class="s">&quot;Roderick&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">alert</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">i</span><span class="si">}</span><span class="s"> - Release </span><span class="si">#{</span><span class="nx">name</span><span class="si">}</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也具有过滤器<code>when</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">prisoners = </span><span class="p">[</span><span class="s">&quot;Roger&quot;</span><span class="p">,</span> <span class="s">&quot;Roderick&quot;</span><span class="p">,</span> <span class="s">&quot;Brian&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nx">release</span> <span class="nx">prisoner</span> <span class="k">for</span> <span class="nx">prisoner</span> <span class="k">in</span> <span class="nx">prisoners</span> <span class="k">when</span> <span class="nx">prisoner</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">is</span> <span class="s">&quot;R&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起来很像普通英语了，也可以用<code>()</code>收集遍历的结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">result = </span><span class="p">(</span><span class="nx">item</span> <span class="k">for</span> <span class="nx">item</span> <span class="k">in</span> <span class="nx">array</span> <span class="k">when</span> <span class="nx">item</span><span class="p">.</span><span class="nx">name</span> <span class="o">is</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>遍历对象的属性可以用<code>of</code>,这是用js自己的<code>for..in</code>实现的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">names = sam: </span><span class="nx">seaborn</span><span class="p">,</span> <span class="nv">donna: </span><span class="nx">moss</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s">&quot;</span><span class="si">#{</span><span class="nx">first</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">last</span><span class="si">}</span><span class="s">&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="nx">first</span><span class="p">,</span> <span class="nx">last</span> <span class="k">of</span> <span class="nx">names</span>
</span></code></pre></td></tr></table></div></figure>


<h3>流程控制</h3>

<p>CoffeeScript使用来自ruby的省略语法，让控制流变得很紧凑，也引进了<code>unless</code>,<code>not</code>,<code>then</code>等语法糖式的关键字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">result = </span><span class="k">if</span> <span class="o">not</span> <span class="kc">true</span> <span class="k">then</span> <span class="s">&quot;false&quot;</span>
</span><span class='line'><span class="nv">result = </span><span class="nx">unless</span> <span class="kc">true</span> <span class="k">then</span> <span class="s">&quot;false&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>CoffeeScript中非常好的一点，就是直接取消了js中的<code>==</code>判断，改成全部用<code>===</code>进行严格比较，js中的<code>==</code>会做大量诡异的类型转换，很多情况下是bug的来源</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">if</span> <span class="s">&quot;1&quot;</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s">&quot;equal&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s">&quot;not equal&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在使用<code>if</code>来进行空值的判断时，js有时会让人困扰，因为&#8221;&#8220;和0都会被转换成false，Coffee提供了<code>?</code>操作符解决这个问题，她只有在变量为<code>null</code>或<code>undefined</code>时才为false</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="s">&quot;&quot;</span><span class="o">?</span> <span class="c1">#true</span>
</span><span class='line'><span class="kc">null</span><span class="o">?</span> <span class="c1">#false</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以用常见的类似ruby中<code>||=</code>的方法，判断赋值，此外还可以用<code>and</code>,<code>or</code>,<code>is</code>关键字代替<code>&amp;&amp;</code>,<code>||</code>,<code>==</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">hash</span> <span class="o">or=</span> <span class="p">{}</span>
</span><span class='line'><span class="nx">hash</span> <span class="o">?=</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>经常有当某个属性存在的时候，才会调用属性上的方法的情况，这时候也可以用<code>?</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">knight</span><span class="p">.</span><span class="nx">hasSword</span><span class="p">()</span><span class="o">?</span><span class="p">.</span><span class="nx">poke</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>只有当<code>hasSword()</code>返回对象不为空时，才会调用<code>poke</code>方法，以下是编译的js代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">_ref</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">((</span><span class="nx">_ref</span> <span class="o">=</span> <span class="nx">knight</span><span class="p">.</span><span class="nx">hasSword</span><span class="p">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_ref</span><span class="p">.</span><span class="nx">poke</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一种情况是当<code>poke</code>方法存在时才调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">knight</span><span class="p">.</span><span class="nx">hasSword</span><span class="p">().</span><span class="nx">poke</span><span class="o">?</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的js代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">_base</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="nx">_base</span> <span class="o">=</span> <span class="nx">knight</span><span class="p">.</span><span class="nx">hasSword</span><span class="p">()).</span><span class="nx">poke</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_base</span><span class="p">.</span><span class="nx">poke</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>switch case</code>语句也有了一些语法糖，并且会默认加上<code>break</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">switch</span> <span class="nx">day</span>
</span><span class='line'>  <span class="k">when</span> <span class="s">&quot;Sun&quot;</span> <span class="k">then</span> <span class="nx">go</span> <span class="nx">relax</span>
</span><span class='line'>  <span class="k">when</span> <span class="s">&quot;Sat&quot;</span> <span class="k">then</span> <span class="nx">go</span> <span class="nx">dancing</span>
</span><span class='line'>  <span class="k">else</span> <span class="nx">go</span> <span class="nx">work</span>
</span></code></pre></td></tr></table></div></figure>


<h3>函数</h3>

<p>CoffeeScript对JavaScript的函数做了很大的简化，举个例子，看一个求和函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">sum = </span><span class="nf">(nums...) -&gt;</span>
</span><span class='line'>  <span class="nx">nums</span><span class="p">.</span><span class="nx">reduce</span> <span class="nf">(x, y) -&gt;</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sum</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应JavaScript</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sum</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">__slice</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">nums</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">nums</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="nx">__slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可以使用和ruby 1.9类似的<em>lambda函数</em>写法<code>-&gt;</code>来代替<code>function</code></li>
<li>参数列表放在<code>-&gt;</code>的前边，且可省略</li>
<li>取消了函数声明，只能将函数作为值定义</li>
<li>在CoffeeScript中，<strong>任何</strong>语句都是表达式(除了<code>break</code>和<code>continue</code>)，都有返回值，因此像ruby一样，不需要显式<code>return</code></li>
<li>js的函数参数有一个很讨厌的地方，就是参数对象<code>arguments</code>不是一个真正的数组，要使用数组方法，必须转换成数组<code>[].slice.call(arguments, 0)</code>这样，而在CoffeeScript中收束(加<code>...</code>)的参数是一个真正的数组</li>
</ul>


<p>CoffeeScript的函数可以有默认参数，如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">times = </span><span class="nf">(a = 1, b = 2) -&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>CoffeeScript的函数调用可以不用<code>()</code>语法包围参数，像ruby一样跟在函数名后面就可以，不过这也有时候会带来问题，特别是没有参数的调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">alert</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">alert</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而不是<code>alert()</code>，这和ruby不同，需要注意</p>

<p>缩进的格式有时需要小心，比如用多个函数做参数的时候，需要这样写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&quot;.toggle&quot;</span><span class="p">).</span><span class="nx">toggle</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="s">&quot;on&quot;</span>
</span><span class='line'><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="s">&quot;off&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.toggle&quot;</span><span class="p">).</span><span class="nx">toggle</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;on&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;off&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>模式</h2>

<p>使用CoffeeScript的一个重要理由，就是她用自己的语法实现了很多很常用的js编程模式，而且，通常是在社区内广泛被承认的最佳实践，如果不熟悉JavaScript的这些模式，可能会在调试代码上遇到一些麻烦，不过，基本上来说还是比较简单易懂的，下面我们会花一些时间研究一下CoffeeScript是用什么样的方法来封装这些通用编程模式的</p>

<h3>闭包</h3>

<p>在js中，普遍会使用闭包实现各种事件的handler或封装模块，以下是CoffeeScript对这一普遍模式的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">closure = </span><span class="nx">do</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">_private = </span><span class="s">&quot;foo&quot;</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="nx">_private</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">closure</span><span class="p">())</span> <span class="c1">#=&gt; &quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>do</code>关键词可以产生一个<em>Immediate Function</em>,下面是对应js代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">closure</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">closure</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_private</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">_private</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">_private</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>闭包中经常需要绑定<code>this</code>的值给闭包的私有变量，CoffeeScript使用特殊的<code>=&gt;</code>语法省去了这个麻烦</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="vi">@clickHandler = </span><span class="o">-&gt;</span> <span class="nx">alert</span> <span class="s">&quot;clicked&quot;</span>
</span><span class='line'><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="s">&quot;click&quot;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">@clickHandler</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>=&gt;</code>生成函数，可以看到生成代码中会加上对<code>this</code>的绑定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">clickHandler</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;clicked&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_this</span><span class="p">.</span><span class="nx">clickHandler</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里CoffeeScript对于<code>this</code>有简单的别名<code>@</code></p>

<h3>扩展</h3>

<p>在js中，所有的对象都是开放的，有时候会扩展原有对象的行为(比如对数组的ECMA5 shim)，这也称为Monkey patching</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">String</span><span class="o">::</span><span class="nv">dasherize = </span><span class="o">-&gt;</span> <span class="nx">@replace</span> <span class="sr">/_/g</span><span class="p">,</span> <span class="s">&quot;-&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>::</code>代表原型的引用，js代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">dasherize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/_/g</span><span class="p">,</span> <span class="s2">&quot;-&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>类</h3>

<p>在js中是否要模拟传统编程语言的类，是个一直以来都有争议的话题，不同的项目，不同的团队，在类的使用上会有不同的看法，不过，一旦决定要使用类，那么至少需要一套良好的实现，CoffeeScript在语言内部实现了类的模拟，我们来看一看一个完整的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Gadget</span>
</span><span class='line'>  <span class="vi">@CITY = </span><span class="s">&quot;beijing&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@create: </span><span class="nf">(name, price) -&gt;</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Gadget</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">price</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">_price = </span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(@name, price) -&gt;</span>
</span><span class='line'>    <span class="nv">_price = </span><span class="nx">price</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">sell: </span><span class="o">=&gt;</span>
</span><span class='line'>    <span class="s">&quot;Buy </span><span class="si">#{</span><span class="nx">@name</span><span class="si">}</span><span class="s"> with </span><span class="si">#{</span><span class="nx">_price</span><span class="si">}</span><span class="s"> in </span><span class="si">#{</span><span class="nx">Gadget</span><span class="p">.</span><span class="nx">CITY</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">iphone = </span><span class="k">new</span> <span class="nx">Gadget</span><span class="p">(</span><span class="s">&quot;iphone&quot;</span><span class="p">,</span> <span class="mi">4999</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">iphone</span><span class="p">.</span><span class="nx">name</span> <span class="c1">#=&gt; &quot;iphone&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">iphone</span><span class="p">.</span><span class="nx">sell</span><span class="p">()</span> <span class="c1">#=&gt; &quot;Buy iphone with 4999 in beijing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ipad = </span><span class="nx">Gadget</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s">&quot;ipad&quot;</span><span class="p">,</span> <span class="mi">3999</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">ipad</span><span class="p">.</span><span class="nx">sell</span><span class="p">()</span> <span class="c1">#=&gt; &quot;Buy ipad with 3999 in beijing&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个Gadget类具有通常语言中类的功能:</p>

<ul>
<li><code>constructor</code>是构造函数，必须用这个名称，类似ruby中的initialize</li>
<li><code>name</code>是实例变量,可以通过<code>iphone.name</code>获取</li>
<li>构造函数中如果给实例变量赋值，直接将<code>@name</code>写在参数中即可，等价于在函数体中的<code>@name = name</code></li>
<li><code>_price</code>是私有变量,需要赋初始值</li>
<li><code>sell</code>是实例方法</li>
<li><code>create</code>是类方法，注意这里使用了<code>@create</code>，这和ruby有些像，在定义时的<code>this</code>指的是这个类本身</li>
<li><code>CITY</code>是类变量</li>
</ul>


<p>要注意的是，对于实例方法，要用<code>=&gt;</code>来绑定<code>this</code>，这样可以作为闭包传递，比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">iphone = </span><span class="k">new</span> <span class="nx">Gadget</span><span class="p">(</span><span class="s">&quot;iphone&quot;</span><span class="p">,</span> <span class="mi">4999</span><span class="p">)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&quot;</span><span class="err">#</span><span class="s">sell&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">iphone</span><span class="p">.</span><span class="nx">sell</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不用<code>=&gt;</code>，闭包被调用时就会丢失实例对象的值(<code>iphone</code>)</p>

<p>对于熟悉基于类的面向对象编程的人，CoffeeScript的类是一目了然的，下面来看看对应的js代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">Gadget</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">__bind</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">me</span><span class="p">){</span> <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span> <span class="p">};</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Gadget</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_price</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Gadget</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Gadget&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Gadget</span><span class="p">.</span><span class="nx">CITY</span> <span class="o">=</span> <span class="s2">&quot;beijing&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Gadget</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">price</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nx">Gadget</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">price</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">_price</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">Gadget</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">price</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">sell</span> <span class="o">=</span> <span class="nx">__bind</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sell</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">_price</span> <span class="o">=</span> <span class="nx">price</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Gadget</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sell</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Buy &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; with &quot;</span> <span class="o">+</span> <span class="nx">_price</span> <span class="o">+</span> <span class="s2">&quot; in &quot;</span> <span class="o">+</span> <span class="nx">Gadget</span><span class="p">.</span><span class="nx">CITY</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Gadget</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上的代码有很多值得注意的地方</p>

<ul>
<li>整体上来说，CoffeeScript的类模拟使用的是一个<em>构造函数闭包</em>，这是最常用的模拟类的模式，好处是可以完整地封装内部变量，且可以使用<code>new</code>来生成实例对象</li>
<li><code>_price</code>就是被封装在闭包内部的私有变量</li>
<li><code>sell</code>这样的实例方法是原型方法，并且在初始化时使用自定义的bind函数绑定实例(用<code>=&gt;</code>定义的情况)</li>
<li><code>create</code>和<code>CITY</code>这样的类成员使用构造函数的属性实现，重复一下，在CoffeeScript类定义中的<code>this</code>指的是整个闭包<code>Gadget</code></li>
<li><code>Gadget.name</code>是额外定义的类名属性</li>
</ul>


<h3>类的继承</h3>

<p>CoffeeScript中为方便地实现类的继承也定义了自己的语法，我们把上面的类简化，来看一下如何继承：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Gadget</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(@name) -&gt;</span>
</span><span class='line'>  <span class="nv">sell: </span><span class="o">=&gt;</span>
</span><span class='line'>    <span class="s">&quot;Buy </span><span class="si">#{</span><span class="nx">@name</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">IPhone</span> <span class="k">extends</span> <span class="nx">Gadget</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="o">-&gt;</span> <span class="k">super</span><span class="p">(</span><span class="s">&quot;iphone&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">nosell: </span><span class="o">=&gt;</span>
</span><span class='line'>    <span class="s">&quot;Don&#39;t </span><span class="si">#{</span><span class="nx">@sell</span><span class="p">()</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">iphone = </span><span class="k">new</span> <span class="nx">IPhone</span>
</span><span class='line'><span class="nx">iphone</span><span class="p">.</span><span class="nx">nosell</span><span class="p">()</span> <span class="c1">#=&gt; Don&#39;t Buy iphone</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用<code>extends</code>关键字可以继承父类中的所有实例属性,比如<code>sell</code></li>
<li><code>super</code>方法可以调用父类的同名方法</li>
<li>如果不覆盖<code>constructor</code>，则她被子类默认调用</li>
</ul>


<p>来看一下对应的js代码，这有一些复杂，我们把和上边类定义中重复的地方去掉，只留下继承的实现部分</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">Gadget</span><span class="p">,</span> <span class="nx">IPhone</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">__extends</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">({}.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">key</span><span class="p">))</span>
</span><span class='line'>          <span class="nx">child</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">ctor</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">child</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">ctor</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">child</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ctor</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">child</span><span class="p">.</span><span class="nx">__super__</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">child</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">IPhone</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">_super</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">__extends</span><span class="p">(</span><span class="nx">IPhone</span><span class="p">,</span> <span class="nx">_super</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">IPhone</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;IPhone&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">IPhone</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">nosell</span> <span class="o">=</span> <span class="nx">__bind</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">nosell</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">IPhone</span><span class="p">.</span><span class="nx">__super__</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&quot;iphone&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">IPhone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">nosell</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Don&#39;t &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sell</span><span class="p">());</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">IPhone</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">})(</span><span class="nx">Gadget</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里重点有三个，</p>

<ul>
<li><code>__extends</code>函数使用了代理构造函数<code>ctor</code>来实现继承，这是非常普遍的js中对象继承的实践模式，进一步解释一下

<ul>
<li>使用代理构造函数的目的是为了避免子类被更改时父类受到影响</li>
<li>使用<code>ctor.prototype = parent.prototype</code>的意义是只继承定义在prototype上的公用属性</li>
</ul>
</li>
<li>父类的类成员被直接引用拷贝到子类，而不是原型继承</li>
<li><code>super</code>的实现方法是<code>parent.prototype.constructor.call(this)</code></li>
</ul>


<h3>混入(Mixin)</h3>

<p>在ruby语言中的Mixin，能够让你的类获得多个模块的方法，可以说是对多重继承一种很好的实现，虽然在CoffeeScript中并没有像ruby的<code>include</code>一样的内置功能，但很容易实现她</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Module</span>
</span><span class='line'>  <span class="vi">@extend: </span><span class="nf">(obj) -&gt;</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">obj</span>
</span><span class='line'>      <span class="nx">@</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@include: </span><span class="nf">(obj) -&gt;</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">obj</span>
</span><span class='line'>      <span class="nx">@</span><span class="o">::</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span>
</span><span class='line'>
</span><span class='line'><span class="nv">classProperties =</span>
</span><span class='line'>  <span class="nv">find: </span><span class="nf">(id) -&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s">&quot;find </span><span class="si">#{</span><span class="nx">id</span><span class="si">}</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">instanceProperties =</span>
</span><span class='line'>  <span class="nv">save: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s">&quot;save&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">User</span> <span class="k">extends</span> <span class="nx">Module</span>
</span><span class='line'>  <span class="nx">@extend</span> <span class="nx">classProperties</span>
</span><span class='line'>  <span class="nx">@include</span> <span class="nx">instanceProperties</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user = </span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">user = </span><span class="k">new</span> <span class="nx">User</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">save</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>继承了Module的类才可以Mixin，当然，这里也可以用组合或者直接为js的构造函数做Monkey patching</li>
<li><code>classProperties</code>是类成员模块，使用<code>@extend</code>来Mixin，实现是简单的拷贝对象的属性</li>
<li><code>instanceProperties</code>是实例成员模块，使用<code>@include</code>来Mixin，实现是拷贝对象原型的属性</li>
<li>需要指出的是，这里的拷贝是引用拷贝，有可能外部会更改被Mixin的模块内部值，更好的方法是深层值拷贝(clone)，包括JQuery在内的很多类库都实现了这类扩展方法</li>
</ul>


<hr />

<h2>结语</h2>

<p>CoffeeScript提供了一门比JavaScript更强大，优雅，表现力丰富的语言，但她毕竟架构于JavaScript之上，而且是静态地编译成JavaScript代码，也就是说，她不能完全避免对JavaScript中一些不良部分的滥用，比如<code>eval</code>,<code>typeof</code>,<code>instanceof</code>等，所以，在任何情况下，建议始终开启<em>Strict Mode</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>严格模式是一个ECMA5标准提出的js子集，禁用了很多js设计中不好的方面，在未来会逐渐成为js的语言标准，详细介绍在<a href="https://developer.mozilla.org/en/JavaScript/Strict_mode#Changes_in_strict_mode">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript, The Hard Parts]]></title>
    <link href="http://lilu.github.com/blog/2012/07/30/javascript/"/>
    <updated>2012-07-30T11:20:00+08:00</updated>
    <id>http://lilu.github.com/blog/2012/07/30/javascript</id>
    <content type="html"><![CDATA[<h2>序</h2>

<hr />

<blockquote><p> In JavaScript, there is a beautiful, elegant, highly expressive language that is buried under a steaming pile of good intentions and blunders.
<small>&#8220;JavaScript, The Good Parts&#8221;, by Douglas Crockford</small></p></blockquote>

<p>JavaScript，做为目前Github上<a href="https://github.com/languages">最为热门的语言</a>，在无论是web开发还是mobile开发方面都已经不可或缺，尤其是最近node.js带来的web app风潮，使得js开发的规模和复杂度又上了一个台阶。</p>

<p>但正如Douglas Crockford所说，JavaScript美丽的本质被隐藏在一堆错误和草率的设计之下，在他的经典著作<a href="http://shop.oreilly.com/product/9780596517748.do">JavaScript, The Good Parts</a>中，明确提出了一个简洁，优雅的语言子集，只使用一门语言最好的部分，可以产生更好的代码，也能造就一个更好的程序员。</p>

<p>这里讨论的，就是在js的The Good Parts中，相对更难，也更重要的部分，即如何设计代码的结构和组织，在保证可读性和易维护性的情况下，做到最大限度地DRY。</p>

<p>本文<strong>不涉及</strong>:</p>

<ul>
<li>变量，表达式，语句等语言基础要素</li>
<li>性能优化</li>
<li>宿主环境(Host Environment)，如浏览器</li>
<li>核心库之外的库和框架</li>
</ul>


<p>本文<strong>只探讨</strong>:</p>

<ul>
<li>语言中较为费解的部分，如闭包，原型和构造函数</li>
<li>如何进行代码复用</li>
<li>常见编程模式</li>
</ul>


<p>在一切开始之前，我建议在每个js项目中，都使用<em>严格模式</em>进行开发</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>严格模式是一个ECMA5标准提出的js子集，在未来会逐渐成为js的语言标准，详细介绍在<a href="https://developer.mozilla.org/en/JavaScript/Strict_mode#Changes_in_strict_mode">这里</a></p>

<p>使用严格模式，可以部分地避免一些js设计不好的部分，比如严格模式的如下限制：</p>

<ul>
<li>所有的变量必须先定义再使用</li>
<li>在作用域内<code>this</code>没有找到明确值的情况下，<code>this</code>为<code>undefined</code>，而不是全局对象</li>
</ul>


<p>这两条规则可以让js语言最大的设计失误<strong>隐式全局变量(Implied Globals)</strong>的危害降低很多很多</p>

<hr />

<h2>对象(Object)</h2>

<p>javascript中的对象，和传统面向对象语言中的对象有本质的不同</p>

<ul>
<li>对象是属性的容器，每个属性都拥有名字(key)和值(value)</li>
<li>对象没有也不需要类(class)</li>
</ul>


<p>对象可以用字面量的方式直接生成，由于js中函数也是对象，可以作为对象的属性，因此js中的对象结合了通常键值對(在别的语言中也称为hash/dictionary)的数据存储能力和一般语言中由类生成的对象的逻辑表达能力，可以说是js最优雅的设计之一</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">foo</span><span class="o">:</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">hello</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="s2">&quot;hello, world&quot;</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>闭包(Closure)</h2>

<p>要了解闭包的概念，首先来检视一下js中的函数(function)到底是什么</p>

<ul>
<li>函数是对象，可以有自己的属性和方法</li>
<li>函数有自己的作用域</li>
</ul>


<h3>函数作用域</h3>

<p>js中没有块级作用域(block scope)，取而代之的是函数作用域(function scope)，即只有函数可以构建出一个上下文环境，变量在声明他们的函数体及之内嵌套的任意函数体内都是有定义的</p>

<p>在作用域中，无论变量的定义在什么地方，js会在解释的时候把定义提到作用域的最前面，这称为<em>Hoisting</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;global&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; undefined</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;local&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; &quot;local&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码等效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;global&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; undefined</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;local&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; &quot;local&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，在作用域中不会出错的方法是将变量(包括嵌套函数)的定义语句提升到最前</p>

<h3>作用域对象</h3>

<p>在函数作用域中，某个用<code>var</code>声明的变量实际上是一个与此函数相关的对象的属性，这个对象在ECMA3标准中称为<em>call object</em>，在ECMA5中称为<em>declarative environment record</em>，通常也有一种叫法是<em>Activation Object</em>，这个对象是一种内部实现，没有方法可以引用</p>

<p>如果没有用<code>var</code>而直接使用了某变量，则此变量视为是全局作用域相关对象(global object)的属性，这也是为什么严格模式要做变量必须定义的限制的原因所在</p>

<p>一种可行的利用函数作用域的方法被称为<em>Immediate Function</em>，被普遍使用在包装模块上，使内部变量不污染全局空间，典型的情景比如javascript书签</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//... code</span>
</span><span class='line'><span class="p">}())</span>
</span></code></pre></td></tr></table></div></figure>


<p>当函数内部又嵌套定义了其他函数时，他们的作用域对象会形成一个<strong>作用域链</strong>，这一组对象定义了代码作用域中的变量，当内部函数使用某个变量时，她会根据作用域链向上查找</p>

<p>当定义一个函数时，这个作用域链得以保存下来，当此函数被调用时，<em>Activation Object</em>被创建，保存局部变量和参数，并被添加至此作用域链上</p>

<h3>闭包的实现</h3>

<p>作用域链和其上保存的变量，让函数对象形成了<strong>闭包</strong>，她可以捕捉到局部变量和参数，并一直保存下来，并可以作为值进行传递</p>

<p>只有一个<em>Activation Object</em>失去所有引用的时候，即她不被包含在任何作用域链内的时候，才会被垃圾回收，这时候这个闭包就永久消失了</p>

<p>一个典型的闭包形成的计数器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">serial_maker</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">seq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">gensym</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="o">++</span><span class="nx">seq</span><span class="p">;}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">serial_maker</span><span class="p">();</span>
</span><span class='line'><span class="nx">s</span><span class="p">.</span><span class="nx">gensym</span><span class="p">();</span> <span class="c1">//=&gt; 1</span>
</span><span class='line'><span class="nx">s</span><span class="p">.</span><span class="nx">gensym</span><span class="p">();</span> <span class="c1">//=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>函数的隐藏属性</h3>

<p>函数对象有<code>call</code>，<code>apply</code>，<code>length</code>之类的属性和方法，<em>Activation Object</em>也有默认的属性，最常见的是函数的参数列表<code>arguments</code>，而较令人费解的，是<code>this</code></p>

<p><code>this</code>在不同的函数调用中，指向不同的对象</p>

<ul>
<li>函数作为方法调用时，<code>this</code>指向方法所属的对象</li>
<li>函数单独被调用时(没有所属对象)，<code>this</code>指向全局对象，在严格模式中，<code>this</code>是<code>undefined</code></li>
<li>函数作为构造函数被调用时<code>new f()</code>，<code>this</code>是构造函数新生成并默认返回的对象</li>
<li>函数使用<code>call</code>或<code>apply</code>方式被调用时，<code>this</code>由传入的参数决定</li>
</ul>


<p>对于闭包来说，无论是<code>this</code>，还是<code>arguments</code>，都是在调用时来决定的，这些隐藏属性闭包无法保存，所以很常见的一种方法是把<code>this</code>保存在局部变量中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">m</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span> <span class="o">===</span> <span class="nx">o</span><span class="p">;</span> <span class="c1">//=&gt; false</span>
</span><span class='line'>            <span class="nx">self</span> <span class="o">===</span> <span class="nx">o</span><span class="p">;</span> <span class="c1">//=&gt; true</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="nx">f</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">o</span><span class="p">.</span><span class="nx">m</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>原型(Prototype)</h2>

<p>js是一门面向对象的语言，但与继承于smalltalk的基于类的面向对象语言不同，js的面向对象使用来自self语言的<em>原型继承</em>的方法实现，在js中，只有对象(object)，而没有对象的模板(class)</p>

<p>题外话，smalltalk和self语言都产生于Xerox PARC(施乐的帕洛阿托研究中心)，这里也是点阵图，图形界面，激光打印和以太网的故乡，致敬一下:)</p>

<h3>原型的实现</h3>

<p>几乎每一个js对象都和另一个对象相关联，这另一个对象就是我们说的原型，每一个对象都从原型继承属性</p>

<p>所有字面量对象(literal object)都具有同一个原型，她是<code>Object.prototype</code>，通过构造器生成的对象原型则是构造器的<code>prototype</code>属性的值</p>

<p>对象的原型对象也有可能有自己的原型，形成了一条原型链(prototype chain)，直到<code>Object.prototype</code>为止，她没有原型</p>

<p>查询对象的属性时，从此对象本身向原型链上依次向上查询，这也称为<em>委托(Delegation)</em></p>

<h3>原型的操作</h3>

<p>指定原型生成对象的方法有两种：</p>

<ol>
<li>使用构造器生成</li>
<li>在ECMA5中，使用<code>Object.create()</code>方法</li>
</ol>


<p>其他的指定原型方法我们将在后面讲述</p>

<p>获取一个对象原型则并不容易，方法也有两种:</p>

<ol>
<li>查询<code>o.constructor.prototype</code>来检测，不过往往原型上的construct属性会丢失掉</li>
<li>在ECMA5中，使用<code>Object.getPrototypeOf()</code>方法</li>
</ol>


<hr />

<h2>构造函数(Constructor)</h2>

<p>不得不说，使用<code>new</code>来初始化对象，这在基于原型继承的js语言中，带来了严重的违和感，根据作者本人的解释，当时的这个设计应该是为了贴近正流行的java语言，让更多人更容易上手，结果造成了js中一个不良和晦涩的设计，不过，在js中，这也是指定原型的必要方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;};</span>
</span><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">john</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;john&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>new</code>调用一个函数时:</p>

<ol>
<li>一个空对象被创建</li>
<li>将此空对象的原型指向<code>Person.prototype</code></li>
<li>将此空对象赋值给<code>this</code></li>
<li>为<code>this.name</code>赋值</li>
<li>如果没有明确<code>return</code>其他对象，则返回<code>this</code></li>
</ol>


<p>为了让构造函数得以实现，<strong>每一个</strong>js中的函数对象都不得不：</p>

<ul>
<li>拥有一个<code>prototype</code>属性，指向一个对象</li>
<li>这个对象有唯一一个属性<code>constructor</code>, 指向此对象所属的函数对象</li>
</ul>


<p>这是复杂，冗余，而不容易理解的，有可能出现这些问题:</p>

<ol>
<li>如果忘记了<code>new</code>去调用构造函数，会造成不可预期的行为，尤其是在非严格模式下，这时的<code>this</code>是全局对象</li>
<li>很多情况下<code>prototype</code>可能会在重构中被完全覆盖，此时<code>constructor</code>属性也会丢失掉</li>
</ol>


<p>在后面我们会探讨创建对象更好的模式</p>

<hr />

<h2>类(Class)</h2>

<p>在js中，代码复用的方法有传统的(基于类的)，也有现代的(基于原型的)，我们先看一下在js中，如何模拟传统面向语言中类的行为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// constructor</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Gadget</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//instance method</span>
</span><span class='line'><span class="nx">Gadget</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setPrice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">price</span><span class="p">)</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">price</span><span class="p">;};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//static method</span>
</span><span class='line'><span class="nx">Gadget</span><span class="p">.</span><span class="nx">isShiny</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="s2">&quot;you bet&quot;</span><span class="p">;};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//static property</span>
</span><span class='line'><span class="nx">Gadget</span><span class="p">.</span><span class="nx">IPHONE</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Gadget</span><span class="p">(</span><span class="s1">&#39;iphone&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Douglas Crockford也提到过另一种方法来构建类，不过他本人并不提倡这种做法</p>

<p>首先Monkey patching(之后会再提到这个概念)一下函数对象，新增加<code>method()</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">method</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">method</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">implementation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">implementation</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>构造类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Gadget</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}.</span>
</span><span class='line'><span class="nx">method</span><span class="p">(</span><span class="s1">&#39;getName&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}).</span>
</span><span class='line'><span class="nx">method</span><span class="p">(</span><span class="s1">&#39;setName&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Gadget</span><span class="p">(</span><span class="s1">&#39;iphone&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span> <span class="c1">// =&gt;&#39;iphone&#39;</span>
</span><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">setName</span><span class="p">(</span><span class="s1">&#39;ipad&#39;</span><span class="p">).</span><span class="nx">getName</span><span class="p">();</span> <span class="c1">// =&gt;&#39;ipad&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用了链式方法(Chaining methods)，这在jQuery和DOM库中相当常见</p>

<hr />

<h2>封装(Encapsulation)</h2>

<p>在javascript中的对象体系中，并没有私有变量这一概念，对象中的所有信息都是公开的和可修改的，至少在ECMA3中是如此，在ECMA5中，对象的每个属性是可以配置成不可修改或不可枚举的，不过，因为现在主要使用闭包作为封装内部数据的方法，所以ECMA5中的这些新的权限相关特性还没有得到广泛的应用。</p>

<p>使用对象字面量时的封装，利用了闭包的概念，并使用了上边提到的immediate function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">iphone</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;iphone&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">getName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="nx">name</span><span class="p">;}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}());</span>
</span><span class='line'><span class="nx">iphone</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span> <span class="c1">//=&gt; iphone</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用构造函数时的封装，相对完整的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Gadget</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//private static member</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//private instance member</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//constructor</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Con</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">_name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">_counter</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// public API </span>
</span><span class='line'>    <span class="nx">Con</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">constructor</span><span class="o">:</span> <span class="nx">Con</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">getName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="nx">_name</span><span class="p">;},</span>
</span><span class='line'>        <span class="nx">getLastId</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="nx">_counter</span><span class="p">;}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Con</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">iphone</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Gadget</span><span class="p">(</span><span class="s1">&#39;iphone&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">iphone</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span> <span class="c1">//=&gt; iphone</span>
</span><span class='line'><span class="nx">iphone</span><span class="p">.</span><span class="nx">getLastId</span><span class="p">();</span> <span class="c1">//=&gt; 1</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ipad</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Gadget</span><span class="p">(</span><span class="s1">&#39;ipad&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">iphone</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span> <span class="c1">//=&gt; ipad</span>
</span><span class='line'><span class="nx">iphone</span><span class="p">.</span><span class="nx">getLastId</span><span class="p">();</span> <span class="c1">//=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，如果封装的内部变量是对象的话，外部代码还是可以对其进行修改的，因为javascript的对象传递的都是引用，为了避免这种情况，可以返回内部私有对象的部分属性或是拷贝</p>

<hr />

<h2>类继承(Class Inheritance)</h2>

<p>先定义一下父类和子类的构造函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="cm">/*...*/</span><span class="p">)};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Child</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="cm">/*...*/</span><span class="p">)};</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单直接的想法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Parent</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式的缺点是Parent的实例成员也被继承了，我们希望只继承prototype中的公用部分</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种共享原型的缺点是<code>Child</code>的原型被更改时全部父对象都被影响</p>

<p>可以引入一个代理构造器来回避这个缺点</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">F</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'><span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">F</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>用一个完整的例子说明一下，我们用<code>klass</code>模拟实现通常面向对象语言中的类</p>

<p>使用起来是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Gadget</span> <span class="o">=</span> <span class="nx">klass</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">getName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">new</span> <span class="nx">Gadget</span><span class="p">(</span><span class="s1">&#39;iphone&#39;</span><span class="p">)).</span><span class="nx">getName</span><span class="p">();</span> <span class="c1">//=&gt; iphone</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Phone</span> <span class="o">=</span> <span class="nx">klass</span><span class="p">(</span><span class="nx">Gadget</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">getName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">.</span><span class="kr">super</span><span class="p">.</span><span class="nx">getName</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;Phone: &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">new</span> <span class="nx">Phone</span><span class="p">(</span><span class="s1">&#39;iphone&#39;</span><span class="p">)).</span><span class="nx">getName</span><span class="p">();</span> <span class="c1">//=&gt; Phone: iphone</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>klass</code>的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">klass</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">Parent</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Child</span><span class="p">,</span> <span class="nx">F</span><span class="p">,</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Child</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//这里自动调用父类的构造方法</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">Child</span><span class="p">.</span><span class="kr">super</span> <span class="o">&amp;&amp;</span> <span class="nx">Child</span><span class="p">.</span><span class="kr">super</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;initialize&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="nx">Child</span><span class="p">.</span><span class="kr">super</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;initialize&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">Parent</span> <span class="o">||</span> <span class="nb">Object</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">F</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">F</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">Child</span><span class="p">.</span><span class="kr">super</span> <span class="o">=</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Child</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//获取所有定义的属性和方法</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
</span><span class='line'>            <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">props</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Child</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种基于类思想的代码复用在很多库中都实现了，用起来可以让程序员完全忘记原型的存在，不过我更倾向于使用其他方法进行代码复用，这样更高效和简单，也更贴近js语言的本质</p>

<hr />

<h2>原型继承(Prototype Inheritance)</h2>

<p>这里不牵涉到类的概念，只是一个对象复用另外一个对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">F</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>        <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">F</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;parent&#39;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">parent</span><span class="p">);</span>
</span><span class='line'><span class="nx">child</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">//=&gt; parent</span>
</span></code></pre></td></tr></table></div></figure>


<p>这也是ECMA5中<code>Object.create</code>方法的简化实现</p>

<hr />

<h2>绑定(Bind)</h2>

<p>除了完整地复用其他对象外，也可以只使用对象的指定方法，把一个对象的方法借给另一个对象使用，这种行为称为绑定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bind</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bind</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">_bound_args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">_bound_args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">args</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">_bound_args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">args</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">one</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;one&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">say</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">greet</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">greet</span> <span class="o">+</span> <span class="s2">&quot;, &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">two</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;two&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">one</span><span class="p">.</span><span class="nx">say</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">two</span><span class="p">))(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span> <span class="c1">//=&gt; hello, two</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是ECMA5中<code>bind</code>方法的简化实现，在客户端大量的事件回调中<code>bind</code>的应用相当普遍</p>

<p>顺带一提，包括上边的<code>method</code>方法和<code>bind</code>方法，js中所有的对象，都是开放的，可以在运行时动态地修改和添加新的行为，这种特性一般称为<em>monkey patching</em></p>

<hr />

<h2>混入(Mixin)</h2>

<p>Mixin是很多语言都有的概念，有时候是以多重继承的面貌展现的</p>

<p>在JavaScript中虽然没有内置Mixin功能，但实现很容易</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">extend</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">child</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">child</span> <span class="o">=</span> <span class="nx">child</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">parent</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
</span><span class='line'>            <span class="nx">child</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">child</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>extend</code>可以将一个对象的属性拷贝到另外一个对象里面去</p>

<p>需要注意的是，这里的拷贝是浅拷贝(shallow copy)，即只拷贝引用，一旦子对象的属性(这个属性本身是对象)被更改的话，父对象也会被更改</p>

<p>解决方法是如果需要的话就进行深拷贝(deep copy)，遍历获取对象的属性进行clone</p>

<p>jQuery库的<code>$.extend</code>方法是一个比较完善的实现，支持浅拷贝，深拷贝，甚至多个对象的Mixin</p>

<hr />

<h2>函数化继承(Functional Inheritance)</h2>

<p>利用js的动态特性，使用mixin类似的方法也可以实现继承，这里没有用到构造函数和原型，来自<em>javascript, the good parts</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mammal</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">get_name</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">name</span><span class="p">;};</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">says</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">saying</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">myMammal</span> <span class="o">=</span> <span class="nx">mammal</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Herb&quot;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cat</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">spec</span><span class="p">.</span><span class="nx">saying</span> <span class="o">=</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">saying</span> <span class="o">||</span> <span class="s1">&#39;meow&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">mammal</span><span class="p">(</span><span class="nx">spec</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">get_name</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">says</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">myCat</span> <span class="o">=</span> <span class="nx">cat</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Henri&quot;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">superior</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="p">[</span><span class="nx">name</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">self</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">coolcat</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">cat</span><span class="p">(</span><span class="nx">spec</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">super_get_name</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">superior</span><span class="p">(</span><span class="s1">&#39;get_name&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">get_name</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;like&#39;</span> <span class="o">+</span> <span class="nx">super_get_name</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39; baby&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">myCoolCat</span> <span class="o">=</span> <span class="nx">coolcat</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bix&#39;</span><span class="p">});</span>
</span><span class='line'><span class="nx">myCoolCat</span><span class="p">.</span><span class="nx">get_name</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>模块(Module)</h2>

<p>js中，通常使用一个全局对象作为namespace，简单直接，在内部，可以使用上边封装部分提到的方法构建对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">array</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//dependencies</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">myobj</span> <span class="o">=</span> <span class="nx">MYAPP</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">mystring</span> <span class="o">=</span> <span class="nx">MYAPP</span><span class="p">.</span><span class="nx">string</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//private properties</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">array_string</span> <span class="o">=</span> <span class="s2">&quot;[object Array]&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ops</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//public API</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">isArray</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">ops</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">===</span> <span class="nx">array_string</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种构建功能模块的方式相当普遍，也可以构建出构造函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">array</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//constructor</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Con</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// public API -- prototype</span>
</span><span class='line'>    <span class="nx">Con</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">constructor</span><span class="o">:</span> <span class="nx">MYAPP</span><span class="p">.</span><span class="nb">Array</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">toArray</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Con</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>柯里化(Curry)</h2>

<p>js中由于闭包的存在，很多函数式编程的模式也可以利用，比如实现函数的curry化功能，即生成一个绑定部分参数的新函数，这在函数式编程中很常见。</p>

<p>Curry这个名称来自于数学家Haskell Curry(著名的Haskell语言也来自于他)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">curry</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">curry</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//arguments并不是真正的数组，所以没有concat方法，我们使用了slice将其转换成了数组</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">slice</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">slice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)));</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">;}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">add1</span> <span class="o">=</span> <span class="nx">add</span><span class="p">.</span><span class="nx">curry</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">add1</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//=&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>结语</h2>

<p>真正掌握一门语言，就需要深入这门语言去编程，这意味着去挖掘语言中最宝贵的特质，使用语言表达能力所限制之内的最简介优雅的方式进行逻辑表达，在js中，最好的部分是对象字面量，闭包，和原型，在允许的情况下，尽量使用这些精华去进行架构设计，而不是为了省事和更快上手，去模拟其他语言的特性</p>

<p>本文只是js编程的基础和起点，在之后会逐渐介绍<em>coffee script</em>，<em>jQuery</em>，<em>backbone</em>等预处理语言，库，与框架，很多时候，这些框架给出的实现，都是非常优雅和便利的，但是要更深入地了解原因，以至于编写自己的扩展和库，这些基础知识是必不可少的</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guide to SASS and Compass]]></title>
    <link href="http://lilu.github.com/blog/2012/07/18/sass/"/>
    <updated>2012-07-18T11:24:00+08:00</updated>
    <id>http://lilu.github.com/blog/2012/07/18/sass</id>
    <content type="html"><![CDATA[<h2>CSS预处理器</h2>

<p>CSS预处理器(CSS Preprocessor)，是一种构架于css之上的高级语言，可以通过脚本编译生成CSS代码，其目的是为了让CSS开发者的工作更简单有趣，当前已经进入了较为成熟的阶段，基本上新的web开发项目大都已普遍使用。</p>

<p>现在最主要的选择有：</p>

<ul>
<li><a href="http://sass-lang.com/">SASS</a> 2007年诞生，最早也是最成熟的CSS预处理器，拥有ruby社区的支持和compass这一最强大的css框架，目前受LESS影响，已经进化到了全面兼容CSS的SCSS。</li>
<li><a href="http://lesscss.org]">LESS</a> 2009年出现，受SASS的影响较大，但又使用CSS的语法，让大部分开发者和设计师更容易上手，在ruby社区之外支持者远超过SASS，其缺点是比起SASS来，可编程功能不够，不过优点是简单和兼容CSS，反过来也影响了SASS演变到了SCSS的时代，著名的Twitter Bootstrap就是采用LESS做底层语言的。</li>
<li><a href="http://learnboost.github.com/stylus/">Stylus</a>，2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，在此社区之内有一定支持者，在广泛的意义上人气还完全不如SASS和LESS。</li>
</ul>


<p>我较为推崇的组合是，<strong>SASS+Compass+Twitter Bootstrap+bootstrap-sass</strong>，这一组合能够获得最好的底层语言SASS，最好的框架Compass，和Bootstrap提供的最强大的UI组件库(被bootstrap-sass翻译成SASS的风格)。</p>

<p>下面就对SASS的常用要素做一简单介绍，大部分例子来自SASS设计者Hampton Catlin的著作<a href="http://pragprog.com/book/pg_sass/pragmatic-guide-to-sass">Pragmatic Guide to Sass</a>，本文<em>不涉及</em>安装过程，命令行工具，和其他web开发框架(比如Rails)的结合，早期非SCSS的语法等内容，想了解更多的朋友可深入阅读上边这本书。</p>

<hr />

<h2>嵌套(nesting)</h2>

<figure class='code'><figcaption><span>CSS选择器(Selector)经常要重复class,id和element的名称</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.infobox</span> <span class="p">{</span><span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.infobox</span> <span class="nc">.message</span> <span class="p">{</span><span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.infobox</span> <span class="nc">.message</span> <span class="o">&gt;</span> <span class="nc">.title</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SASS可以让选择器嵌套，做到DRY</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.infobox</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>    <span class="nc">.message</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nb">red</span><span class="err">;</span>
</span><span class='line'>        <span class="na">&gt;</span><span class="err"> </span><span class="na">.title</span><span class="err"> </span><span class="na">{color</span><span class="o">:</span> <span class="nb">red</span><span class="err">;}</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于某些需要引入父选择器名称的情况，SASS使用&amp;代替</p>

<figure class='code'><figcaption><span>CSS会让同样元素的样式变得分散</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.infobox</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.user</span> <span class="nc">.infobox</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">gray</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.message</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">gray</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.message.new</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SASS可以让他们在一起</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.infobox</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nb">blue</span><span class="err">;</span>
</span><span class='line'>    <span class="na">.user</span><span class="err"> </span><span class="na">&amp;</span><span class="err"> </span><span class="na">{color</span><span class="o">:</span> <span class="nb">gray</span><span class="err">;}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'><span class="nc">.message</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nb">gray</span><span class="err">;</span>
</span><span class='line'>    <span class="na">&amp;.new</span><span class="err"> </span><span class="na">{color</span><span class="o">:</span> <span class="nb">red</span><span class="err">;}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于当前做跨平台web开发来说，@media非常常用，而SASS的嵌套会区别对待</p>

<figure class='code'><figcaption><span>CSS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.main</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">320px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nc">.main</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">font-size</span><span class="o">:</span> <span class="m">35px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SASS让同样的选择器在不同media条件下的样式在一起</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.main</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'>    <span class="o">@</span><span class="n">media</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="k">max-width</span><span class="o">:</span> <span class="m">320px</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">font-size</span><span class="o">:</span> <span class="m">35px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>变量(variables)</h2>

<p>变量是编程语言的基石，掌握变量的定义和使用，是SASS编程的起点。</p>

<figure class='code'><figcaption><span>CSS中同样的值不得不重复很多次</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="m">#336699</span><span class="p">;}</span>
</span><span class='line'><span class="nt">body</span> <span class="nf">#wrapper</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">#eee</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">body</span> <span class="nf">#wrapper</span> <span class="nt">h1</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#336699</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SASS有了变量，只需要改一次，而且往往相关值一起定义的，方便查找</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="c1">//可以定义全局变量</span>
</span><span class='line'><span class="nv">$primary_color</span><span class="o">:</span> <span class="mh">#369</span><span class="err">;</span>
</span><span class='line'><span class="nv">$secondary_color</span><span class="o">:</span> <span class="mh">#eee</span><span class="err">;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">body</span> <span class="err">{</span>
</span><span class='line'>    <span class="c1">//也可以定义局部变量</span>
</span><span class='line'>    <span class="nv">$page_width</span><span class="o">:</span> <span class="mi">300</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="na">background</span><span class="o">:</span> <span class="nv">$primary_color</span><span class="err">;</span>
</span><span class='line'>    <span class="nn">#wrapper</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">width</span><span class="o">:</span> <span class="nv">$page_width</span><span class="err">;</span>
</span><span class='line'>        <span class="na">background</span><span class="o">:</span> <span class="nb">white</span><span class="err">;</span>
</span><span class='line'>        <span class="na">border</span><span class="o">:</span> <span class="nv">$secondary_color</span><span class="err">;</span>
</span><span class='line'>        <span class="na">h1</span><span class="err"> </span><span class="na">{color</span><span class="o">:</span> <span class="nv">$primary_color</span><span class="err">;</span> <span class="err">}</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于上边代码中的全局和局部变量，这里稍微说一下SASS的缺点，同名局部变量会覆盖全局变量的值，这很不自然</p>

<figure class='code'><figcaption><span>SASS这一点不如LESS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nv">$color</span><span class="o">:</span> <span class="nb">black</span><span class="err">;</span>
</span><span class='line'><span class="nc">.scoped</span> <span class="err">{</span>
</span><span class='line'>    <span class="nv">$color</span><span class="o">:</span> <span class="nb">white</span><span class="err">;</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$color</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'><span class="nc">.unscoped</span> <span class="err">{</span>
</span><span class='line'>    <span class="c1">// LESS = black (global)</span>
</span><span class='line'>    <span class="c1">// SASS = white (overwritten by local)</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$color</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了变量，自然可以进行对值的计算</p>

<figure class='code'><figcaption><span>Calculating in SASS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="c1">//以下代码中修改页面宽度只需要改一次</span>
</span><span class='line'><span class="nv">$width</span><span class="o">:</span> <span class="mi">500</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'><span class="nv">$sidebar_percent</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.2</span><span class="err">;</span>
</span><span class='line'><span class="nn">#page</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="nv">$width</span><span class="err">;</span>
</span><span class='line'>    <span class="na">#sidebar</span><span class="err"> </span><span class="na">{width</span><span class="o">:</span> <span class="nv">$width</span> <span class="o">*</span> <span class="nv">$sidebar_percent</span><span class="err">;}</span>
</span><span class='line'>    <span class="na">#content</span><span class="err"> </span><span class="na">{width</span><span class="o">:</span> <span class="nv">$width</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nv">$sidebar_percent</span><span class="p">)</span><span class="err">;}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>变量还可以嵌入字符串中，这在编程语言中称为<strong>插值</strong>(Interpolating)</p>

<figure class='code'><figcaption><span>CSS </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.car.bmw_make</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.car.bmw_make</span> <span class="nc">.image</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="sx">url(&quot;images/bmw.png&quot;)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Interpolating in SASS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nv">$car</span><span class="o">:</span> <span class="s2">&quot;bmw&quot;</span><span class="err">;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.car.</span><span class="si">#{</span><span class="nv">$car</span><span class="si">}</span><span class="nc">_make</span> <span class="err">{</span><span class="nt">s</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nb">blue</span><span class="err">;</span>
</span><span class='line'>    <span class="nc">.image</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">background</span><span class="o">:</span> <span class="sx">url(&quot;images/</span><span class="si">#{</span><span class="nv">$car</span><span class="si">}</span><span class="sx">.png&quot;)</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>函数(function)</h2>

<p>在编程语言中，函数是仅此于变量的基本结构体，SASS中有很多预定义函数，这里用颜色相关的函数举例如下</p>

<figure class='code'><figcaption><span>CSS需要定义整套颜色</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.main</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#336699</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.lighten</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#6699cc</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.saturate</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#1466b8</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SASS只需要定义一个基本颜色，其他可以通过函数获取</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nv">$main_color</span><span class="o">:</span> <span class="mh">#336699</span><span class="err">;</span>
</span><span class='line'><span class="na">.main</span><span class="err"> </span><span class="na">{color</span><span class="o">:</span> <span class="nv">$main_color</span><span class="err">;}</span>
</span><span class='line'><span class="na">.lighten</span><span class="err"> </span><span class="na">{color</span><span class="o">:</span> <span class="nf">lighten</span><span class="p">(</span><span class="nv">$main_color</span><span class="o">,</span> <span class="mi">20</span><span class="kt">%</span><span class="p">)</span><span class="err">;}</span>
</span><span class='line'><span class="na">.saturate</span><span class="err"> </span><span class="na">{color</span><span class="o">:</span> <span class="nf">saturate</span><span class="p">(</span><span class="nv">$main_color</span><span class="o">,</span> <span class="mi">30</span><span class="kt">%</span><span class="p">)</span><span class="err">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>SASS的底层函数相当完整，如果会使用ruby的话，也可以自定义函数，完整列表在<a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html">这里</a></p>

<hr />

<h2>导入(import)</h2>

<p>在样式表过于复杂的时候，你可以将其按功能模块分割成不同的文件进行开发，SASS会将这些小文件统一编译成一个完整的CSS文件，与简单的包含多个文件不同，SASS的导入，是可以将变量，Mixin，等等一起导入的</p>

<figure class='code'><figcaption><span>_colors.scss(被导入的SASS文件，通常用_开头，它们在编译过程中不会生成CSS文件)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nv">$main_color</span><span class="o">:</span> <span class="mh">#336699</span><span class="err">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>application.scss 导入文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="c1">//SASS会自动加上_去寻找文件</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&quot;colors&quot;;</span>
</span><span class='line'><span class="na">#page</span><span class="err"> </span><span class="na">{color</span><span class="o">:</span> <span class="nv">$main_color</span><span class="err">;}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>扩展(extend)</h2>

<p>@extend可以复制其他class或id的指定样式，让你无须再将逻辑上不相关的class放在一起，当然更不用复制粘贴了</p>

<figure class='code'><figcaption><span>CSS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.blue_button</span><span class="o">,</span> <span class="nc">.checkout_button</span> <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="m">#336699</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.blue_button</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.checkout_button</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SASS @extend</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.blue_button</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">background</span><span class="o">:</span> <span class="mh">#336699</span><span class="err">;</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nb">white</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.checkout_button</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@extend</span> <span class="nc">.blue_button</span><span class="o">;</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nb">green</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>混入(mixin)</h2>

<p>Mixin可以说是SASS等CSS预处理语言最强大的要素了，简单来说，mixin可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用。</p>

<p>Mixin可以定义在单独文件中</p>

<figure class='code'><figcaption><span>_text.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@mixin</span><span class="nf"> blue_text</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="mh">#336699</span><span class="err">;</span>
</span><span class='line'>    <span class="na">font-family</span><span class="o">:</span> <span class="n">helvetica</span><span class="o">,</span> <span class="n">arial</span><span class="o">,</span> <span class="no">sans-serif</span><span class="err">;</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mi">20</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>    <span class="na">font-variant</span><span class="o">:</span> <span class="no">small-caps</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>导入并使用mixin</p>

<figure class='code'><figcaption><span>main.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&quot;text&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.product_title</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> blue_text</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>mixin与extend看似实现的功能差不多，但实际上除了语义上的不同外，mixin更为强大和复杂，因为她有参数(arguments)，参数还可以有默认值</p>

<p>实现跨浏览器圆角</p>

<figure class='code'><figcaption><span>Cross browser Rounded borders mixin </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@mixin</span><span class="nf"> rounded_borders</span><span class="p">(</span><span class="nv">$color</span><span class="o">,</span> <span class="nv">$width</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span><span class="o">,</span> <span class="nv">$rounding</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">-moz-border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span>
</span><span class='line'>    <span class="na">-webkit-border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span>
</span><span class='line'>    <span class="na">-khtml-border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span>
</span><span class='line'>    <span class="na">-o-border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span>
</span><span class='line'>    <span class="na">border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span>
</span><span class='line'>    <span class="na">border</span><span class="o">:</span> <span class="nv">$width</span> <span class="nv">$color</span> <span class="no">solid</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.header</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> rounded_borders</span><span class="p">(</span><span class="mh">#336699</span><span class="o">,</span> <span class="mi">3</span><span class="kt">px</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现跨浏览器透明度</p>

<figure class='code'><figcaption><span>Cross browser Opacity mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@mixin</span><span class="nf"> opacity</span><span class="p">(</span><span class="nv">$opacity</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">filter</span><span class="o">:</span> <span class="nf">alpha</span><span class="p">(</span><span class="no">opacity</span><span class="o">=</span><span class="si">#{</span><span class="nv">$opacity</span><span class="o">*</span><span class="mi">100</span><span class="si">}</span><span class="p">)</span><span class="err">;</span> <span class="c1">// IE 5-9+</span>
</span><span class='line'>    <span class="na">opacity</span><span class="o">:</span> <span class="nv">$opacity</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.h1</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> opacity</span><span class="p">(</span><span class="mi">0</span><span class="mf">.6</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>迭代(each)</h2>

<p>在主流语言中，迭代属于循环实现的一种功能，例如ruby的each或者python的for in，sass使用@each实现</p>

<figure class='code'><figcaption><span>CSS中要写很多同样的代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.thom_picture</span> <span class="p">{</span><span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&quot;/image/thom.jpg&quot;)</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.jonny_picture</span> <span class="p">{</span><span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&quot;/image/jonny.jpg&quot;)</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.colin_picture</span> <span class="p">{</span><span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&quot;/image/colin.jpg&quot;)</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.phil_picture</span> <span class="p">{</span><span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&quot;/image/phil.jpg&quot;)</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SASS使用@each变得非常简单</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@each</span> <span class="err">$</span><span class="nt">member</span> <span class="nt">in</span> <span class="nt">thom</span><span class="o">,</span> <span class="nt">jonny</span><span class="o">,</span> <span class="nt">colin</span><span class="o">,</span> <span class="nt">phil</span> <span class="err">{</span>
</span><span class='line'>    <span class="nc">.</span><span class="si">#{</span><span class="nv">$member</span><span class="si">}</span><span class="nc">_picture</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">background-image</span><span class="o">:</span> <span class="sx">url(&quot;/image/</span><span class="si">#{</span><span class="nv">$member</span><span class="si">}</span><span class="sx">.jpg&quot;)</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>条件(condition)</h2>

<p>说到编程基本控制流，除了循环就是条件了，sass中使用@if进行条件控制</p>

<figure class='code'><figcaption><span>判断式中可以使用==/>/<等通常判别符</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@mixin</span><span class="nf"> country_color</span><span class="p">(</span><span class="nv">$country</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@if</span> <span class="nv">$country</span> <span class="o">==</span> <span class="n">france</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">color</span><span class="o">:</span> <span class="nb">blue</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>    <span class="k">@else</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">color</span><span class="o">:</span> <span class="nb">red</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.england</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> country_color</span><span class="p">(</span><span class="n">england</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'><span class="nc">.france</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> country_color</span><span class="p">(</span><span class="n">france</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>Compass</h2>

<p>以上SASS的基本要素都介绍的差不多了，不过对于在实践中使用SASS来说，强大的<a href="http://compass-style.org/">Compass</a>是必不可少的，她由SASS的核心团队成员Chris Eppstein创建，是一个非常丰富的样式框架，包括大量定义好的mixin，函数，以及对SASS的扩展。</p>

<p>这里非常简要地介绍一些常用功能</p>

<h3>Reset</h3>

<p>Compass提供一个基于大名鼎鼎的Eric Meyer的Reset CSS，我还没有和Twitter Bootstrap采用的Normalize.css一一比对过，不过compass reset的好处是可以分不同的模块reset</p>

<figure class='code'><figcaption><span>compass reset</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="c1">//global reset</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&quot;compass/reset&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//partial reset </span>
</span><span class='line'><span class="k">@import</span> <span class="s">&quot;compass/reset/utilities&quot;;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CSS3</h3>

<p>前边提到的圆角和透明mixin实际上都在Compass中提供，当然还有几乎所有的css3相关模块，实际上有了Compass，不需要再写任何浏览器特定的代码了。</p>

<figure class='code'><figcaption><span>compass rounder corners</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&quot;compass/css3/border-radius&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.header</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> border-radius</span><span class="p">(</span><span class="mi">4</span><span class="kt">px</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.header_top_left_rounded</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> border-top-left-radius</span><span class="p">(</span><span class="mi">4</span><span class="kt">px</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Typography</h3>

<p>Compass有很多基本mixin可以方便地定制各种表现层元素</p>

<p>比如水平列表，这个在顶部导航栏中相当常用</p>

<figure class='code'><figcaption><span>Compass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&quot;compass/typography/lists/horizontal-list&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span><span class="nc">.horiz</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> horizontal-list</span><span class="p">(</span><span class="mi">4</span><span class="kt">px</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们看一眼在css中的对应实现多么复杂</p>

<figure class='code'><figcaption><span>CSS实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">ul</span><span class="nc">.horiz</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">zoom</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">ul</span><span class="nc">.horiz</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">list-style-image</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">white-space</span><span class="o">:</span> <span class="k">nowrap</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span> <span class="m">4px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding-right</span><span class="o">:</span> <span class="m">4px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">ul</span><span class="nc">.horiz</span> <span class="nt">li</span><span class="nd">:first-child</span><span class="o">,</span> <span class="nt">ul</span><span class="nc">.horiz</span> <span class="nt">li</span><span class="nc">.first</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">ul</span><span class="nc">.horiz</span> <span class="nt">li</span><span class="nd">:last-child</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding-right</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">ul</span><span class="nc">.horiz</span> <span class="nt">li</span><span class="nc">.last</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding-right</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Layout</h3>

<p>Compass也提供一些影响布局的方法，比如将一个元素延展(Stretch)</p>

<p>HTML如下</p>

<figure class='code'><figcaption><span>HTML for stretching </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;stretch_box&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;stretched</span><span class="nt">&gt;</span>
</span><span class='line'>        Stretched fully!
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>compass stretching</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&quot;compass/layout/stretching&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//stretched fully</span>
</span><span class='line'><span class="nc">.stretched</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> stretch</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//stretched with gap</span>
</span><span class='line'><span class="nc">.stretched</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> stretch</span><span class="p">(</span><span class="mi">12</span><span class="kt">px</span><span class="o">,</span> <span class="mi">12</span><span class="kt">px</span><span class="o">,</span> <span class="mi">12</span><span class="kt">px</span><span class="o">,</span> <span class="mi">12</span><span class="kt">px</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//stretched horizontally</span>
</span><span class='line'><span class="nc">.stretched</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> stretch-x</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Utilities</h3>

<p>Compass还有很多实用功能模块，比如很烦人但在布局中经常要使用的clearfix，有了这个mixin，就不需要再定义一个clearfix的class，然后污染outer_box的html了</p>

<figure class='code'><figcaption><span>Compass clearfix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&quot;compass/utilities/general/clearfix&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="nn">#outer_box</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> clearfix</span><span class="err">;</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">500</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>    <span class="nn">#inner_box</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">float</span><span class="o">:</span> <span class="no">left</span><span class="err">;</span>
</span><span class='line'>        <span class="na">width</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>        <span class="na">height</span><span class="o">:</span> <span class="mi">100</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一个强大的功能是css sprites，原来我们经常用photoshop手动生成这张集合了所有小图标的大图片，修改和维护如同噩梦，现在有了compass，一切轻松了。</p>

<figure class='code'><figcaption><span>compass sprites</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="c1">//combines all images in icon folder into one</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&quot;icon/*.png&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//&quot;movie&quot; is the origin icon&#39;s file name</span>
</span><span class='line'><span class="nc">.movie_icon</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">height</span><span class="o">:</span> <span class="mi">20</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> icon-sprite</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>整篇介绍到这里就结束了，其实，无论是SASS这样的CSS预处理器，还是Compass这样的框架，要达成的目的都是一致的，那就是遵循<strong>DRY</strong>, <strong>可读性</strong>, 和<strong>正交化</strong>的设计原则，让我们的生活变得更轻松快乐。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bootstrap,  and CSS framework landscape]]></title>
    <link href="http://lilu.github.com/blog/2012/07/16/style-framework/"/>
    <updated>2012-07-16T12:22:00+08:00</updated>
    <id>http://lilu.github.com/blog/2012/07/16/style-framework</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>(以下简称<em>Bootstrap</em>)是一个web开发的前端工具库，由Twitter的<em>Mark Otto</em>和<em>Jacob Thornton</em>创建，在很短的时间内，就成为了github上最热门的项目，不过，目前web开发已经进入相对成熟的后期了，可以找到很多出色的前端样式框架，虽然很方便，不过对于一个新项目来说，不可避免地会陷入选择性障碍，今天就简单总结一下我所知的主流现状：</p>

<h2>SASS and LESS</h2>

<p>不管是<a href="http://sass-lang.com/">SASS</a>，还是<a href="http://lesscss.org">LESS</a>，都可以视为一种基于CSS之上的高级语言，其目的是使得CSS开发更灵活和更强大，这两者我的感觉是对于程序员来说，SASS的功能要远比LESS强大，基本可以说是一种真正的编程语言了，而对于设计师，LESS则相对清晰明了，<a href="http://css-tricks.com/sass-vs-less/">这里</a>是Chris Coyier写的一篇关于SASS和LESS的背靠背对比，可以说是相当中肯的(评论也相当有料喔)。当然，如果使用Rails之类的框架，基于SASS是会来的更方便一些。</p>

<hr />

<h2>Compass and Blueprint</h2>

<p>SASS和<a href="http://compass-style.org/">Compass</a>的关系，在很多人来看类似于ruby和rails，compass基于SASS，是一个真正意义上的编程框架，提供了大量的mixin(可理解为函数库)，无论是对css3繁杂的多浏览器写法的简化支持，还是实现各种常见功能的helper，都是强大而丰富的。另外，包括Scott Davis和Eric Meyer的核心团队，也可以说是全明星组合。</p>

<p><a href="http://www.blueprintcss.org/">Blueprint</a>是一套预定义的样式，包括对大部分常用web交互组件的渲染，并且有一个强大的栅格系统(grid system)，即使不懂设计的程序员，也可以使用blueprint的默认样式做出很漂亮的页面。</p>

<p>Blueprint和Compass，是一个分工很明确的组合，前者负责样式渲染，后者则是基础框架和模块，可以说，在bootstrap诞生之前，是web开发首选的黄金组合。</p>

<hr />

<h2>HTML5 Boilerplate</h2>

<p><a href="http://html5boilerplate.com/">HTML5 Boilerplate</a>项目(以下简称h5bp)则如同名字一样，实现的是一个web页面的标准模板，尤其针对html5进行了全面优化，同时也对老浏览器向后兼容，基本上来说，h5bp与样式相关的主要部分，是compass的一个子集，不过h5bp并不只限于css，还默认引入了很多很好的js开发库，包括<a href="http://modernizr.com/">Modernizr</a>和Jquery，再加上一个标准化的index.html模板</p>

<p>h5bp是这里提到的所有框架中使用起来最方便的，当然受功能限制，她最适用的目标是单页web app或者静态页面，对于复杂的项目来说，需要和其他框架做互补。</p>

<hr />

<h2>Twitter Bootstrap</h2>

<p>新兴而野心十足的Bootstrap跟上述又都不同，她是基于LESS的一套前端工具库，意图非常明显，想以一个项目，整合Compass，Blueprint，h5bp的目标功能，成为web前端的一站式解决方案。</p>

<ul>
<li>一套完整的基础css模块，但不如compass丰富和强大</li>
<li>一套预定义样式表，也包括一个栅格系统，和blueprint提供的差不多，只是设计风格不一样</li>
<li>一组基于Jquery的js交互插件，这是Bootstrap真正强大的地方，也是她严格意义上可以取代Blueprint的原因所在，这些非常不错的小插件，包括对话框，下拉导航等等，不但功能完善，而且十分精致，正在成为众多jquery项目的默认设计标准。</li>
</ul>


<p>特别提一下，Bootstrap使用<a href="http://necolas.github.com/normalize.css/">Normalize.css</a>来进行Reset CSS，这一项目已经成为了事实标准(超过Compass的Eric meyer 2.0)，强烈推荐使用，另外前边说的h5bp也使用Normalize，因此，如果你在项目中同时使用了h5bp和Bootstrap， 请注意，<strong>没有必要再引入h5bp的初始样式表style.css</strong></p>

<hr />

<h2>So What?</h2>

<p>说了一大堆，该来点结论了，目前对于web开发，尤其是由程序员进行的full stack开发，最好的组合是：</p>

<p><strong>SASS+Compass+Bootstrap</strong></p>

<p>这样既可以利用SASS强大的编程能力，Compass强大的底层函数，又可以获取Bootstrap丰富的UI组件支持。</p>

<p>只是，Bootstrap是基于LESS的，要让她们协同工作，需要一个SASS的Bootstrap移植版本，幸亏github上从来不缺这类项目，当前最好的一个是<a href="https://github.com/thomas-mcdonald/bootstrap-sass">bootstrap-sass</a></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown and Lightweight markup languages]]></title>
    <link href="http://lilu.github.com/blog/2012/07/13/markdown/"/>
    <updated>2012-07-13T14:20:00+08:00</updated>
    <id>http://lilu.github.com/blog/2012/07/13/markdown</id>
    <content type="html"><![CDATA[<h2>轻量化标记语言</h2>

<p>指的是一类语法简单,容易阅读和修改，且富于表达力的标记语言(轻量化是相对于较复杂的标记语言，如SGML系，包括XML/HTML等)，最早起源于构造各类软件的文档，出于程序员们追求效率的天然本能，这些文档应该足够方便被阅读和修改，后来也逐渐扩散至web发布领域，尤其是blog和wiki，通常我们使用轻量化标记语言输入内容，然后由服务端程序将其转换成html等“较重的”结构化语言。</p>

<p>在平常会经常遇到的轻量化标记语言大致有如下几种：</p>

<ul>
<li><p><strong>Markdown</strong> 现在最为流行的标记语言，最初的设计就是为了快速阅读和修改有格式的文本，并且很容易的转换成HTML，最早起源于perl社区</p></li>
<li><p><strong>Textile</strong> 也是为了web发布所设计的，最早流行于php社区，后面也有了其他语言的实现</p></li>
<li><p><strong>MediaWiki</strong> wikipedia使用的标记语言，最早被wikimedia基金会开发出来，基于php，之后逐渐被大部分的主流wiki采用</p></li>
<li><p><strong>BBCode</strong> 这个常混论坛的人都比较熟悉了，Bulletin Board Code，主要用于生成各类论坛讨论版的帖子格式，目前主流论坛几乎都支持，缺点是比较混乱，标准不是很统一，很多大论坛甚至有自己的BBCode标签定义，在将来也许会慢慢被规则清晰统一的Markdown等取代掉。</p></li>
<li><p><strong>Org-mode</strong> 很古老的标记语言，像我这样的Emacs厨对其相当热爱，功能也比起Markdown等更为强大，其开发目的是对各类事物进行系统的归纳和整理，因此也涵盖了时间管理等要素，缺点是经过了很多年的发展，已变得较为复杂，此外除了程序员向的服务（github等），并未得到广泛的支持。</p></li>
</ul>


<p>我自己的文档，包括这个blog的编辑和发布，是使用Markdown语言的，此外还有平常经常使用的github，Markdown也是其主要支持对象，所以下面就简单介绍一下Markdown，其他几类较新的标记语言，如Texile，实质也是大同小异，主要是看自己及所在社区的喜好了。</p>

<hr />

<h2>Markdown简介</h2>

<p>主要参考自<a href="http://daringfireball.net/projects/markdown/syntax">Markdown官网</a></p>

<h3>概览</h3>

<h4>1. 哲学</h4>

<p>   Markdown来源于纯文本email的格式设计，最重要的设计思想，是可读性高于一切，不止是渲染后的格式，本身也要易读和规整，因此，每一个表示符号都是经过精心选择的，让他们看上去和表达的意思达成一致。</p>

<h4>2. 与HTML的关系</h4>

<p>   Markdown的语法是作为web的书写语言而设计的，为了降低复杂性，她实现的是html表现层的一个子集，对于那些不包含在Markdown语法里的html标记，很简单，直接使用html就可以了，作为内嵌实现，一切出现在Markdown文档里的html标记都是可以被正确解析的。</p>

<p>   Block元素稍微有点例外，它们必须被空行包围，而且开始和结束标签不能缩进，这个限制也还比较自然，例如：</p>

<pre><code>   This is a regular paragraph.

   &lt;table&gt;
     &lt;tr&gt;
       &lt;td&gt;Foo&lt;/td&gt;
     &lt;/tr&gt;
   &lt;/table&gt;

   This is another regular paragraph.
</code></pre>

<h4>3. 特殊字符转义</h4>

<p>Markdown这方面的实现很智能，它会根据html特殊符号(&lt;>&amp;)出现的上下文来决定是否转义，比如 <code>&amp;copy;</code> 不会被转义，直接输出&copy;，但如果是<code>AT&amp;T</code>，就会被转义以正常输出。</p>

<h3>Block元素</h3>

<h4>1. 段落和换行</h4>

<p>在Markdown里，上下被空行包围的一行或多行文本，就是段落了，这里和其他的标记语言有所区别，对于空行，Markdown并不强制插入<code>&lt;br&gt;</code>标签，除非在某一行后面跟随了两个以上的空格，这样要比每一个换行都生成<code>&lt;br&gt;</code>好的多，也更容易使用css进行渲染。</p>

<h4>2. 标题</h4>

<p>Markdown支持两种方式的header</p>

<ul>
<li><p>Settext</p>

<pre><code>  This is an H1
  =============

  This is an H2
  -------------
</code></pre></li>
</ul>


<p>任意数量的=和-都可以</p>

<ul>
<li><p>atx</p>

<pre><code>  # This is an H1

  ## This is an H2

  ###### This is an H6
</code></pre></li>
</ul>


<p>#的数量对应着header的级别(1-6), 也可以选择在后面加上#来闭合。</p>

<h4>3. 引用</h4>

<p>使用email式的引用格式（每一行前加上> )，不过可以简化如下：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>也支持嵌套引用，使用<code>&gt; &gt;</code>即可</p>

<h4>4. 列表</h4>

<ul>
<li><p>无序列表（ul）</p>

<pre><code>  *   Red
  *   Green
  *   Blue
</code></pre></li>
</ul>


<p>无序列表可以使用(*-+)做前置标记，它们是可以互换的</p>

<ul>
<li><p>有序列表（ol）</p>

<pre><code>  1. Bird
  2. McHale
  3. Parish
</code></pre></li>
</ul>


<p>有序列表前的序号实际上是无关紧要的，可以用任意数字，不过还是按顺序加上的好，如果不想被转换成有序列表，可以对(.)进行转义，如</p>

<pre><code>1986\. What a great season.       
</code></pre>

<p>列表项如果前后有空行，每项内会被当成段落处理，比如</p>

<pre><code>*   Bird

*   Magic
</code></pre>

<p>会变成</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>这点有时很方便，但值得注意，列表项里的每个段落，也需要一致的缩进。</p>

<h4>5. 代码</h4>

<p>只要在每行前，缩进至少4个空格，就可以产生code block，如下：</p>

<pre><code>This is a normal paragraph:

    &lt;div class="footer"&gt;
        &amp;copy; 2004 Foo Corporation
    &lt;/div&gt;
</code></pre>

<p>会使用pre和code标签生成，当然，代码块里的特殊符号会自动转义：</p>

<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<h4>6. 水平分割线</h4>

<p><code>&lt;hr&gt;</code>标签生成的方法是三个及以上的(*-_)，比如：</p>

<pre><code>---
____
* * * * *
</code></pre>

<h3>Inline元素</h3>

<h4>1. 链接</h4>

<p>Markdown中的链接有两种，inline和reference</p>

<ul>
<li><p>inline link</p>

<pre><code>  This is [an example](http://example.com/ "Title") inline link.
</code></pre>

<p>  生成：</p>

<pre><code>  &lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
  an example&lt;/a&gt; inline link.&lt;/p&gt;    
</code></pre></li>
<li><p>reference link</p>

<pre><code>  This is [an example][id] reference-style link.
</code></pre>

<p>  在文档的任何地方，可以定义id所指向的这个link label</p>

<pre><code>  [id]: http://example.com/  "Optional Title Here"    
</code></pre>

<p>  甚至id可以省去</p>

<pre><code>  I get 10 times more traffic from [Google][] than from
  [Yahoo][] or [MSN][].

  [google]: http://google.com/        "Google"
  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
  [msn]:    http://search.msn.com/    "MSN Search"
</code></pre>

<p>  这样可以让文档更清晰易读</p></li>
<li><p>此外，Markdown还支持自动转化链接，如：</p>

<pre><code>  &lt;http://example.com/&gt;
</code></pre>

<p>会生成</p>

<pre><code>  &lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;    
</code></pre></li>
</ul>


<h4>2. 强调</h4>

<p>(*)和(_)会转成<code>&lt;em&gt;</code>，(**)和(__)则是<code>&lt;strong&gt;</code>, 想要普通的*可以用\*来转义</p>

<h4>3. 代码</h4>

<p>使用(`)来嵌入代码片段</p>

<pre><code>Use the `printf()` function.
</code></pre>

<p>生成</p>

<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;    
</code></pre>

<h4>4. 图像</h4>

<p>在Markdown里，图像的嵌入和链接一致，也分为inline和reference两种</p>

<p>用法大致类似：</p>

<pre><code>![Alt text](/path/to/img.jpg "Optional title")    
</code></pre>

<p>目前Markdown还不能定义图像的属性，如果你愿意的话，可以直接使用img标签</p>
]]></content>
  </entry>
  
</feed>
