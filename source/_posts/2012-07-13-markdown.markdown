---
layout: post
title: "Markdown and Lightweight markup languages"
date: 2012-07-13 14:20
comments: true
categories: 
---

## 轻量化标记语言

指的是一类语法简单,容易阅读和修改，且富于表达力的标记语言(轻量化是相对于较复杂的标记语言，如SGML系，包括XML/HTML等)，最早起源于构造各类软件的文档，出于程序员们追求效率的天然本能，这些文档应该足够方便被阅读和修改，后来也逐渐扩散至web发布领域，尤其是blog和wiki，通常我们使用轻量化标记语言输入内容，然后由服务端程序将其转换成html等“较重的”结构化语言。

在平常会经常遇到的轻量化标记语言大致有如下几种：

* **Markdown** 现在最为流行的标记语言，最初的设计就是为了快速阅读和修改有格式的文本，并且很容易的转换成HTML，最早起源于perl社区

* **Textile** 也是为了web发布所设计的，最早流行于php社区，后面也有了其他语言的实现

* **MediaWiki** wikipedia使用的标记语言，最早被wikimedia基金会开发出来，基于php，之后逐渐被大部分的主流wiki采用

* **BBCode** 这个常混论坛的人都比较熟悉了，Bulletin Board Code，主要用于生成各类论坛讨论版的帖子格式，目前主流论坛几乎都支持，缺点是比较混乱，标准不是很统一，很多大论坛甚至有自己的BBCode标签定义，在将来也许会慢慢被规则清晰统一的Markdown等取代掉。

* **Org-mode** 很古老的标记语言，像我这样的Emacs厨对其相当热爱，功能也比起Markdown等更为强大，其开发目的是对各类事物进行系统的归纳和整理，因此也涵盖了时间管理等要素，缺点是经过了很多年的发展，已变得较为复杂，此外除了程序员向的服务（github等），并未得到广泛的支持。

我自己的文档，包括这个blog的编辑和发布，是使用Markdown语言的，此外还有平常经常使用的github，Markdown也是其主要支持对象，所以下面就简单介绍一下Markdown，其他几类较新的标记语言，如Texile，实质也是大同小异，主要是看自己及所在社区的喜好了。

---


## Markdown简介

主要参考自[Markdown官网](http://daringfireball.net/projects/markdown/syntax)

### 概览

#### 1. 哲学
   
   Markdown来源于纯文本email的格式设计，最重要的设计思想，是可读性高于一切，不止是渲染后的格式，本身也要易读和规整，因此，每一个表示符号都是经过精心选择的，让他们看上去和表达的意思达成一致。

#### 2. 与HTML的关系

   Markdown的语法是作为web的书写语言而设计的，为了降低复杂性，她实现的是html表现层的一个子集，对于那些不包含在Markdown语法里的html标记，很简单，直接使用html就可以了，作为内嵌实现，一切出现在Markdown文档里的html标记都是可以被正确解析的。
   
   Block元素稍微有点例外，它们必须被空行包围，而且开始和结束标签不能缩进，这个限制也还比较自然，例如：
   
       This is a regular paragraph.

       <table>
         <tr>
           <td>Foo</td>
         </tr>
       </table>

       This is another regular paragraph.

#### 3. 特殊字符转义

Markdown这方面的实现很智能，它会根据html特殊符号(<>&)出现的上下文来决定是否转义，比如 `&copy;` 不会被转义，直接输出&copy;，但如果是`AT&T`，就会被转义以正常输出。
    

### Block元素

#### 1. 段落和换行

在Markdown里，上下被空行包围的一行或多行文本，就是段落了，这里和其他的标记语言有所区别，对于空行，Markdown并不强制插入`<br>`标签，除非在某一行后面跟随了两个以上的空格，这样要比每一个换行都生成`<br>`好的多，也更容易使用css进行渲染。
    
#### 2. 标题

Markdown支持两种方式的header
    
* Settext
    
        This is an H1
        =============

        This is an H2
        -------------

任意数量的=和-都可以
    
* atx
    
        # This is an H1

        ## This is an H2

        ###### This is an H6

\#的数量对应着header的级别(1-6), 也可以选择在后面加上#来闭合。
    
#### 3. 引用

使用email式的引用格式（每一行前加上> )，不过可以简化如下：
    
    > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
    consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

    > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
    id sem consectetuer libero luctus adipiscing.
    
也支持嵌套引用，使用`> > `即可

#### 4. 列表

* 无序列表（ul）
    
        *   Red
        *   Green
        *   Blue

无序列表可以使用(*-+)做前置标记，它们是可以互换的

* 有序列表（ol）
    
        1. Bird
        2. McHale
        3. Parish

有序列表前的序号实际上是无关紧要的，可以用任意数字，不过还是按顺序加上的好，如果不想被转换成有序列表，可以对(.)进行转义，如
    
    1986\. What a great season.       
    
列表项如果前后有空行，每项内会被当成段落处理，比如
    
    *   Bird

    *   Magic

会变成
    
    <ul>
    <li><p>Bird</p></li>
    <li><p>Magic</p></li>
    </ul>

这点有时很方便，但值得注意，列表项里的每个段落，也需要一致的缩进。
    
#### 5. 代码

只要在每行前，缩进至少4个空格，就可以产生code block，如下：
    
    This is a normal paragraph:

        <div class="footer">
            &copy; 2004 Foo Corporation
        </div>

会使用pre和code标签生成，当然，代码块里的特殊符号会自动转义：
    
    <p>This is a normal paragraph:</p>

    <pre><code>&lt;div class="footer"&gt;
        &amp;copy; 2004 Foo Corporation
        &lt;/div&gt;
    </code></pre>

#### 6. 水平分割线

`<hr>`标签生成的方法是三个及以上的(\*\-\_)，比如：
    
    ---
    ____
    * * * * *


### Inline元素

#### 1. 链接

Markdown中的链接有两种，inline和reference
    
* inline link
    
        This is [an example](http://example.com/ "Title") inline link.

    生成：
    
        <p>This is <a href="http://example.com/" title="Title">
        an example</a> inline link.</p>    

* reference link
    
        This is [an example][id] reference-style link.

    在文档的任何地方，可以定义id所指向的这个link label
    
        [id]: http://example.com/  "Optional Title Here"    

    甚至id可以省去
    
        I get 10 times more traffic from [Google][] than from
        [Yahoo][] or [MSN][].

        [google]: http://google.com/        "Google"
        [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
        [msn]:    http://search.msn.com/    "MSN Search"
    
    这样可以让文档更清晰易读
    
* 此外，Markdown还支持自动转化链接，如：
    
        <http://example.com/>

  会生成
    
        <a href="http://example.com/">http://example.com/</a>    
    
#### 2. 强调

(\*)和(\_)会转成`<em>`，(\*\*)和(\_\_)则是`<strong>`, 想要普通的*可以用\\\*来转义
    
#### 3. 代码

使用(`)来嵌入代码片段
    
    Use the `printf()` function.

生成
  
    <p>Use the <code>printf()</code> function.</p>    
   
#### 4. 图像

在Markdown里，图像的嵌入和链接一致，也分为inline和reference两种
    
用法大致类似：
    
    ![Alt text](/path/to/img.jpg "Optional title")    

目前Markdown还不能定义图像的属性，如果你愿意的话，可以直接使用img标签
